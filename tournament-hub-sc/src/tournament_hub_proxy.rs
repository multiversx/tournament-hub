// Code generated by the multiversx-sc proxy generator. DO NOT EDIT.

////////////////////////////////////////////////////
////////////////// AUTO-GENERATED //////////////////
////////////////////////////////////////////////////

#![allow(dead_code)]
#![allow(clippy::all)]

use multiversx_sc::proxy_imports::*;

pub struct TournamentHubProxy;

impl<Env, From, To, Gas> TxProxyTrait<Env, From, To, Gas> for TournamentHubProxy
where
    Env: TxEnv,
    From: TxFrom<Env>,
    To: TxTo<Env>,
    Gas: TxGas<Env>,
{
    type TxProxyMethods = TournamentHubProxyMethods<Env, From, To, Gas>;

    fn proxy_methods(self, tx: Tx<Env, From, To, (), Gas, (), ()>) -> Self::TxProxyMethods {
        TournamentHubProxyMethods { wrapped_tx: tx }
    }
}

pub struct TournamentHubProxyMethods<Env, From, To, Gas>
where
    Env: TxEnv,
    From: TxFrom<Env>,
    To: TxTo<Env>,
    Gas: TxGas<Env>,
{
    wrapped_tx: Tx<Env, From, To, (), Gas, (), ()>,
}

#[rustfmt::skip]
impl<Env, From, Gas> TournamentHubProxyMethods<Env, From, (), Gas>
where
    Env: TxEnv,
    Env::Api: VMApi,
    From: TxFrom<Env>,
    Gas: TxGas<Env>,
{
    pub fn init(
        self,
    ) -> TxTypedDeploy<Env, From, NotPayable, Gas, ()> {
        self.wrapped_tx
            .payment(NotPayable)
            .raw_deploy()
            .original_result()
    }
}

#[rustfmt::skip]
impl<Env, From, To, Gas> TournamentHubProxyMethods<Env, From, To, Gas>
where
    Env: TxEnv,
    Env::Api: VMApi,
    From: TxFrom<Env>,
    To: TxTo<Env>,
    Gas: TxGas<Env>,
{
    pub fn upgrade(
        self,
    ) -> TxTypedUpgrade<Env, From, To, NotPayable, Gas, ()> {
        self.wrapped_tx
            .payment(NotPayable)
            .raw_upgrade()
            .original_result()
    }
}

#[rustfmt::skip]
impl<Env, From, To, Gas> TournamentHubProxyMethods<Env, From, To, Gas>
where
    Env: TxEnv,
    Env::Api: VMApi,
    From: TxFrom<Env>,
    To: TxTo<Env>,
    Gas: TxGas<Env>,
{
    pub fn register_game<
        Arg0: ProxyArg<ManagedAddress<Env::Api>>,
        Arg1: ProxyArg<u32>,
        Arg2: ProxyArg<ManagedVec<Env::Api, u32>>,
        Arg3: ProxyArg<bool>,
    >(
        self,
        signing_server_address: Arg0,
        podium_size: Arg1,
        prize_distribution_percentages: Arg2,
        allow_late_join: Arg3,
    ) -> TxTypedCall<Env, From, To, NotPayable, Gas, ()> {
        self.wrapped_tx
            .payment(NotPayable)
            .raw_call("registerGame")
            .argument(&signing_server_address)
            .argument(&podium_size)
            .argument(&prize_distribution_percentages)
            .argument(&allow_late_join)
            .original_result()
    }

    pub fn set_house_fee_percentage<
        Arg0: ProxyArg<u32>,
    >(
        self,
        new_fee: Arg0,
    ) -> TxTypedCall<Env, From, To, NotPayable, Gas, ()> {
        self.wrapped_tx
            .payment(NotPayable)
            .raw_call("setHouseFeePercentage")
            .argument(&new_fee)
            .original_result()
    }

    pub fn submit_results<
        Arg0: ProxyArg<usize>,
        Arg1: ProxyArg<ManagedVec<Env::Api, ManagedAddress<Env::Api>>>,
        Arg2: ProxyArg<ManagedBuffer<Env::Api>>,
    >(
        self,
        tournament_index: Arg0,
        winner_podium: Arg1,
        signed_result: Arg2,
    ) -> TxTypedCall<Env, From, To, NotPayable, Gas, ()> {
        self.wrapped_tx
            .payment(NotPayable)
            .raw_call("submitResults")
            .argument(&tournament_index)
            .argument(&winner_podium)
            .argument(&signed_result)
            .original_result()
    }

    pub fn place_spectator_bet<
        Arg0: ProxyArg<usize>,
        Arg1: ProxyArg<ManagedAddress<Env::Api>>,
    >(
        self,
        tournament_index: Arg0,
        betting_on_player: Arg1,
    ) -> TxTypedCall<Env, From, To, (), Gas, ()> {
        self.wrapped_tx
            .raw_call("placeSpectatorBet")
            .argument(&tournament_index)
            .argument(&betting_on_player)
            .original_result()
    }

    pub fn claim_spectator_winnings<
        Arg0: ProxyArg<usize>,
    >(
        self,
        tournament_index: Arg0,
    ) -> TxTypedCall<Env, From, To, NotPayable, Gas, ()> {
        self.wrapped_tx
            .payment(NotPayable)
            .raw_call("claimSpectatorWinnings")
            .argument(&tournament_index)
            .original_result()
    }

    pub fn create_tournament<
        Arg0: ProxyArg<usize>,
        Arg1: ProxyArg<BigUint<Env::Api>>,
        Arg2: ProxyArg<u64>,
        Arg3: ProxyArg<u64>,
    >(
        self,
        game_index: Arg0,
        entry_fee: Arg1,
        join_deadline: Arg2,
        play_deadline: Arg3,
    ) -> TxTypedCall<Env, From, To, NotPayable, Gas, ()> {
        self.wrapped_tx
            .payment(NotPayable)
            .raw_call("createTournament")
            .argument(&game_index)
            .argument(&entry_fee)
            .argument(&join_deadline)
            .argument(&play_deadline)
            .original_result()
    }

    pub fn join_tournament<
        Arg0: ProxyArg<usize>,
    >(
        self,
        tournament_index: Arg0,
    ) -> TxTypedCall<Env, From, To, (), Gas, ()> {
        self.wrapped_tx
            .raw_call("joinTournament")
            .argument(&tournament_index)
            .original_result()
    }

    pub fn start_tournament<
        Arg0: ProxyArg<usize>,
    >(
        self,
        tournament_index: Arg0,
    ) -> TxTypedCall<Env, From, To, NotPayable, Gas, ()> {
        self.wrapped_tx
            .payment(NotPayable)
            .raw_call("startTournament")
            .argument(&tournament_index)
            .original_result()
    }

    pub fn get_game_config<
        Arg0: ProxyArg<usize>,
    >(
        self,
        game_index: Arg0,
    ) -> TxTypedCall<Env, From, To, NotPayable, Gas, Option<GameConfig<Env::Api>>> {
        self.wrapped_tx
            .payment(NotPayable)
            .raw_call("getGameConfig")
            .argument(&game_index)
            .original_result()
    }

    pub fn get_tournament<
        Arg0: ProxyArg<usize>,
    >(
        self,
        tournament_index: Arg0,
    ) -> TxTypedCall<Env, From, To, NotPayable, Gas, Option<Tournament<Env::Api>>> {
        self.wrapped_tx
            .payment(NotPayable)
            .raw_call("getTournament")
            .argument(&tournament_index)
            .original_result()
    }

    pub fn get_number_of_tournaments(
        self,
    ) -> TxTypedCall<Env, From, To, NotPayable, Gas, usize> {
        self.wrapped_tx
            .payment(NotPayable)
            .raw_call("getNumberOfTournaments")
            .original_result()
    }

    pub fn get_active_tournament_ids(
        self,
    ) -> TxTypedCall<Env, From, To, NotPayable, Gas, ManagedVec<Env::Api, u64>> {
        self.wrapped_tx
            .payment(NotPayable)
            .raw_call("getActiveTournamentIds")
            .original_result()
    }

    pub fn get_spectator_bets<
        Arg0: ProxyArg<usize>,
        Arg1: ProxyArg<ManagedAddress<Env::Api>>,
    >(
        self,
        tournament_index: Arg0,
        player: Arg1,
    ) -> TxTypedCall<Env, From, To, NotPayable, Gas, ManagedVec<Env::Api, SpectatorBet<Env::Api>>> {
        self.wrapped_tx
            .payment(NotPayable)
            .raw_call("getSpectatorBets")
            .argument(&tournament_index)
            .argument(&player)
            .original_result()
    }

    pub fn get_spectator_pool_total<
        Arg0: ProxyArg<usize>,
    >(
        self,
        tournament_index: Arg0,
    ) -> TxTypedCall<Env, From, To, NotPayable, Gas, BigUint<Env::Api>> {
        self.wrapped_tx
            .payment(NotPayable)
            .raw_call("getSpectatorPoolTotal")
            .argument(&tournament_index)
            .original_result()
    }

    pub fn get_accumulated_house_fees(
        self,
    ) -> TxTypedCall<Env, From, To, NotPayable, Gas, BigUint<Env::Api>> {
        self.wrapped_tx
            .payment(NotPayable)
            .raw_call("getAccumulatedHouseFees")
            .original_result()
    }
}

#[type_abi]
#[derive(TopEncode, TopDecode, NestedEncode, NestedDecode, Clone, Debug, PartialEq)]
pub struct GameConfig<Api>
where
    Api: ManagedTypeApi,
{
    pub signing_server_address: ManagedAddress<Api>,
    pub podium_size: u32,
    pub prize_distribution_percentages: ManagedVec<Api, u32>,
    pub house_fee_percentage: u32,
    pub allow_late_join: bool,
}

#[type_abi]
#[derive(TopEncode, TopDecode, NestedEncode, NestedDecode, Clone, Debug, PartialEq)]
pub struct Tournament<Api>
where
    Api: ManagedTypeApi,
{
    pub game_id: u64,
    pub status: TournamentStatus,
    pub entry_fee: BigUint<Api>,
    pub participants: ManagedVec<Api, ManagedAddress<Api>>,
    pub prize_pool: BigUint<Api>,
    pub join_deadline: u64,
    pub play_deadline: u64,
    pub final_podium: ManagedVec<Api, ManagedAddress<Api>>,
    pub creator: ManagedAddress<Api>,
}

#[type_abi]
#[derive(TopEncode, TopDecode, NestedEncode, NestedDecode, Clone, Debug, PartialEq)]
pub enum TournamentStatus {
    Joining,
    Playing,
    ProcessingResults,
    Completed,
}

#[type_abi]
#[derive(TopEncode, TopDecode, ManagedVecItem, NestedEncode, NestedDecode, Clone, Debug, PartialEq)]
pub struct SpectatorBet<Api>
where
    Api: ManagedTypeApi,
{
    pub bettor_address: ManagedAddress<Api>,
    pub amount: BigUint<Api>,
}
